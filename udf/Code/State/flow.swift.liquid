{% include 'header' %}

import Foundation
import SwiftUI_UDF

enum {{ module_info.name }}Flow: IdentifiableFlow {
    case none, loading
    
    init() { self = .none }
    
    mutating func reduce(_ action: AnyAction) {
        switch action.value {
            
        case let action as Actions.Error where action.id == Self.id:
            self = .none
/*          
        //If you have cancellations logic in your middleware and you need to handle cancelation event
        case let action as Actions.DidCancelEffect where action.cancelation == ObservableMiddlewareToCancel.Cancelation.message:
                //Actions.DidCancelEffect where ObservableMiddlewareToCancel.Cancelation.allCases.contains(action.cancelation):
            self = .none
*/
        default:
            break
        }
    }
}