{% include 'header' %}

import SwiftUI
import SwiftUI_UDF
import SwiftUI_Kit

struct SignInContainer: Container {
    typealias ContainerComponent = SignInComponent<ForgotPasswordContainer, SignUpContainer>
    
    @Environment(\.presentationMode) var presentationMode
 
    func map(state: AppState, store: EnvironmentStore<AppState>) -> ContainerComponent.Props {
        .init(
            email: Binding(form: state.signInForm, keyPath: \SignInForm.email, store: store),
            password: Binding(form: state.signInForm, keyPath: \SignInForm.password, store: store),

            isEnabled: state.signInForm.isEnabledSignIn,
            isLoaderPresented: Binding(value: state.authFlow == .signIn ),
            signInAction: store.bind(Actions.SignIn()),
            signInAppleAction: store.bind(Actions.SignIn()),
            forgotPassword: ForgotPasswordContainer(),
            signUp: SignUpContainer(),
            alertStatus: Binding(   
                get: { store.state.signInForm.alert },
                set: { store.dispatch(Actions.UpdateAlertStatus(status: $0, id: RegisterCaseFlow.id)) }
            )
        )
    }
    
    func onContainerAppear(store: EnvironmentStore<AppState>) {
        store.dispatch(Actions.UpdateFormField(keyPath: \SignInForm.email, value: ""))
        store.dispatch(Actions.UpdateFormField(keyPath: \SignInForm.password, value: ""))
//        #if DEBUG
//        store.dispatch(Actions.UpdateFormField(keyPath: \SignInForm.email, value: ""))
//        store.dispatch(Actions.UpdateFormField(keyPath: \SignInForm.password, value: "123123123"))
//        #endif
    }
}
