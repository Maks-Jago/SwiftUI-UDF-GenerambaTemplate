{% include 'header' %}

import SwiftUI
import SwiftUI_UDF
import SwiftUI_Kit

struct ForgotPasswordContainer: Container {
    typealias ContainerComponent = ForgotPasswordComponent
    @Environment(\.presentationMode) var presentationMode

    func map(state: AppState, store: AppEnvironmentStore) -> ContainerComponent.Props {
        .init(
            email: Binding(
                get: { state.forgotPasswordForm.email },
                set: { store.dispatch(Actions.UpdateField(id: ForgotPasswordForm.Field.email, value: $0)) }
            ),
            
            isEnabled: state.forgotPasswordForm.isEmailValid,
            isLoaderPresented: Binding(value: isLoading(state) ),
            forgotAction: store.bind(Actions.SendForgotPassword()),
            finishAction: presentationMode.dismissAction(),
            isFinished: state.forgotPasswordForm.isFinished,
            error: Binding(
                get: { state.forgotPasswordForm.error },
                set: { store.dispatch(Actions.Error(error: $0, id: ForgotPasswordForm.id)) }
            )
        )
    }
    
    func onContainerAppear(store: EnvironmentStore<AppState>) {
        store.dispatch(Actions.UpdateField(id: ForgotPasswordForm.Field.email, value: ""))
    }
    
    func onContainerDisappear(store: EnvironmentStore<AppState>) {
        store.dispatch(Actions.UpdateForgotPasswordIsFinished.init(finished: false))
    }
    
    func isLoading(_ state: AppState) -> Bool {
        if case .forgotPassword = state.authFlow {
            return true
        }
        
        return false
    }
}
