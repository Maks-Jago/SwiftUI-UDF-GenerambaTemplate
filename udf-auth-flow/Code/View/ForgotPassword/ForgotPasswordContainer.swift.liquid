{% include 'header' %}

import SwiftUI
import SwiftUI_UDF
import SwiftUI_Kit

struct ForgotPasswordContainer: Container {
    typealias ContainerComponent = ForgotPasswordComponent
    @Environment(\.presentationMode) var presentationMode

    func map(state: AppState, store: EnvironmentStore<AppState>) -> ContainerComponent.Props {
        .init(            
            email: Binding(form: state.forgotPasswordForm, keyPath: \ForgotPasswordForm.email, store: store),
            isEnabled: state.forgotPasswordForm.isEmailValid,
            isLoaderPresented: Binding(value: state.authFlow == .forgotPassword ),
            forgotAction: store.bind(Actions.SendForgotPassword()),
            finishAction: presentationMode.dismissAction(),
            isFinished: state.forgotPasswordForm.isFinished,
            alertStatus: Binding(   
                get: { state.forgotPasswordForm.alert },
                set: { store.dispatch(Actions.UpdateAlertStatus(status: $0, id: AuthFlow.forgotPasswordId)) }
            )
        )
    }
    
    func onContainerAppear(store: EnvironmentStore<AppState>) {
        store.dispatch(Actions.UpdateFormField(keyPath: \ForgotPasswordForm.email, value: ""))
    }
    
    func onContainerDisappear(store: EnvironmentStore<AppState>) {
        store.dispatch(Actions.UpdateForgotPasswordIsFinished(finished: false))
    }
}
